'use strict';

// Simple script to upload industry cover images for Mining & Metals and Petrochemical industries
// Usage: node src/scripts/upload-industry-covers-simple.js

const path = require('path');
const fs = require('fs');
const { glob } = require('glob');
const cloudinaryService = require('../services/cloudinary');

function pathToFileURL(p) {
  const { pathToFileURL: toURL } = require('url');
  return toURL(p);
}

function sanitizeKey(name) {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '');
}

async function importIndustryImages(imagesJsFile) {
  const mod = await import(pathToFileURL(imagesJsFile).href);
  const images = mod.default || mod.industryImages || {};
  return images;
}

async function uploadCoverImagesForIndustry(displayName, files) {
  const safeSubService = sanitizeKey(displayName);
  const serviceType = 'industries';
  const uploaded = [];

  console.log(`\n📤 Uploading ${files.length} images for ${displayName}...`);
  
  for (const file of files) {
    console.log(`  - Uploading: ${path.basename(file)}`);
    const result = await cloudinaryService.uploadImage(
      file,
      serviceType,
      `${safeSubService}/covers`,
      null
    );
    uploaded.push({
      file: path.basename(file),
      url: result.url,
      publicId: result.public_id
    });
    console.log(`    ✅ Uploaded: ${result.url}`);
  }
  return uploaded;
}

function buildImagesJsContent(map) {
  const lines = [];
  lines.push('// Auto-generated by backend/src/scripts/upload-industry-covers-simple.js');
  lines.push('// Do not edit manually. Re-run the script to update.');
  lines.push('');
  lines.push('export const industryImages = {');
  for (const [key, val] of Object.entries(map)) {
    lines.push(`  "${key}": {`);
    lines.push(`    name: ${JSON.stringify(val.name)},`);
    lines.push('    images: [');
    for (const u of val.images || []) {
      lines.push(`      { file: ${JSON.stringify(u.file)}, url: ${JSON.stringify(u.url)}, publicId: ${JSON.stringify(u.publicId)} },`);
    }
    lines.push('    ],');
    if (val.coverImages && val.coverImages.length > 0) {
      lines.push('    coverImages: [');
      for (const u of val.coverImages) {
        lines.push(`      { file: ${JSON.stringify(u.file)}, url: ${JSON.stringify(u.url)}, publicId: ${JSON.stringify(u.publicId)} },`);
      }
      lines.push('    ]');
    } else {
      lines.push('    coverImages: []');
    }
    lines.push('  },');
  }
  lines.push('};');
  lines.push('');
  lines.push('export default industryImages;');
  lines.push('');
  return lines.join('\n');
}

async function main() {
  const repoRoot = path.resolve(__dirname, '../../..');
  const uploadsRoot = path.join(repoRoot, 'frontend', 'uploads');
  const imagesJsPath = path.join(repoRoot, 'frontend', 'src', 'images.js');

  console.log('🚀 Starting industry cover image upload process...\n');
  console.log(`📁 Uploads directory: ${uploadsRoot}`);
  console.log(`📄 Images file: ${imagesJsPath}\n`);

  // Load existing map
  const existing = await importIndustryImages(imagesJsPath);

  // Normalize to working structure
  const map = {};
  for (const [k, v] of Object.entries(existing)) {
    map[k] = {
      name: v?.name || k,
      images: Array.isArray(v?.images) ? v.images : [],
      coverImages: Array.isArray(v?.coverImages) ? v.coverImages : []
    };
  }

  // Target specific industries
  const targetIndustries = [
    'Mining & Metals Plants & Refineries cover-pic',
    'Petrochemical Plants & Refineries cover-pic'
  ];

  console.log('🎯 Processing target industries:');
  targetIndustries.forEach(industry => console.log(`  - ${industry}`));
  console.log('');

  let totalUploaded = 0;

  for (const folderName of targetIndustries) {
    const displayName = folderName.replace(' cover-pic', '');
    const safeKey = sanitizeKey(displayName);

    console.log(`\n🔍 Processing: ${displayName} (${safeKey})`);

    // Resolve key by name or safe key
    let key = Object.keys(map).find(k => map[k].name === displayName);
    if (!key) key = safeKey;
    if (!map[key]) {
      map[key] = { name: displayName, images: [], coverImages: [] };
    }

    const absFolder = path.join(uploadsRoot, folderName);
    
    // Check if folder exists
    if (!fs.existsSync(absFolder)) {
      console.log(`  ⚠️  Folder not found: ${absFolder}`);
      continue;
    }

    const pattern = path.join(absFolder, '*.{png,jpg,jpeg,webp}').replace(/\\/g, '/');
    const files = await glob(pattern, { nocase: true });
    
    if (files.length === 0) {
      console.log(`  📭 No images found in ${folderName}`);
      console.log(`  💡 Please add your cover images to: ${absFolder}`);
      continue;
    }

    console.log(`  📸 Found ${files.length} images to upload`);
    const uploaded = await uploadCoverImagesForIndustry(displayName, files);
    map[key].coverImages = uploaded;
    totalUploaded += uploaded.length;
    console.log(`  ✅ Successfully uploaded ${uploaded.length} cover images for ${displayName}`);
  }

  // Write back images.js
  await fs.promises.mkdir(path.dirname(imagesJsPath), { recursive: true });
  const content = buildImagesJsContent(map);
  await fs.promises.writeFile(imagesJsPath, content, 'utf8');
  
  console.log(`\n📝 Updated ${imagesJsPath}`);
  console.log(`🎉 Industry cover images upload completed successfully!`);
  console.log(`📊 Total images uploaded: ${totalUploaded}`);
  
  if (totalUploaded === 0) {
    console.log('\n💡 Next steps:');
    console.log('1. Add your cover images to the following folders:');
    console.log(`   - ${path.join(uploadsRoot, 'Mining & Metals Plants & Refineries cover-pic')}`);
    console.log(`   - ${path.join(uploadsRoot, 'Petrochemical Plants & Refineries cover-pic')}`);
    console.log('2. Run this script again to upload the images');
  }
}

main().catch((err) => {
  console.error('❌ Error:', err);
  process.exit(1);
});
